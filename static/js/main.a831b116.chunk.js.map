{"version":3,"sources":["assets/logo.svg","serviceWorker.js","components/Header/header.jsx","components/ContractPage/ContractPage.jsx","components/UsersPage/UsersPage.jsx","components/AddressesPage/AddressesPage.jsx","components/JournalPage/JournalPage.jsx","components/TransactionsPage/TransactionsPage.jsx","components/ProfilePage/ProfilePage.jsx","routes.js","components/App.jsx","store/reducers.js","store/configureStore.js","index.jsx"],"names":["module","exports","Boolean","window","location","hostname","match","Header","Navbar","expand","Brand","href","src","logo","alt","Toggle","aria-controls","Collapse","id","Nav","className","to","NavDropdown","title","Item","ContractPage","Container","UsersPage","AddressesPage","JournalPage","TransactionsPage","ProfilePage","routes","path","exact","component","value","type","App","map","route","index","key","name","render","props","rootReducer","history","combineReducers","router","connectRouter","createBrowserHistory","store","createStore","compose","applyMiddleware","routerMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a831b116.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8ac90c27.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport logo from '../../assets/logo.svg'\nimport './header.scss'\n\nfunction Header() {\n  return (\n    <Navbar expand=\"lg\">\n      <Navbar.Brand href=\"#home\"><img src={logo} alt=\"\"/></Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Link className=\"link\" to=\"/contract\">Контракт</Link>\n          <Link className=\"link\" to=\"/users\">Пользователи</Link>\n          <Link className=\"link\" to=\"/addresses\">Адреса</Link>\n          <Link className=\"link\" to=\"/journal\">Журнал</Link>\n          <Link className=\"link\" to=\"/transactions\">Транзакции</Link>\n          <Link className=\"link\" to=\"/profile\">Мой профиль</Link>\n          <NavDropdown title=\"mail@mail.mail\" id=\"basic-nav-dropdown\" className=\"link\">\n            <NavDropdown.Item href=\"#action/3.1\">Выйти из системы</NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n\n}\n\nexport default Header;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nfunction ContractPage() {\n  return (\n    <Container>\n      ContractPage\n    </Container>\n  );\n}\n\nexport default ContractPage;","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nfunction UsersPage() {\n  return (\n    <Container>\n      UsersPage\n    </Container>\n  );\n}\n\nexport default UsersPage;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nfunction AddressesPage() {\n  return (\n    <Container>\n      AddressesPage\n    </Container>\n  );\n}\n\nexport default AddressesPage;","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nfunction JournalPage() {\n  return (\n    <Container>\n      JournalPage\n    </Container>\n  );\n}\n\nexport default JournalPage;","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nfunction TransactionsPage() {\n  return (\n    <Container>\n      TransactionsPage\n    </Container>\n  );\n}\n\nexport default TransactionsPage;","import React from 'react';\nimport './ProfilePage.scss'\nimport { Container } from 'react-bootstrap';\n\nfunction ProfilePage() {\n  return (\n    <div className='page-content'>\n      <h1>Профиль пользователя</h1>\n      <div className='app-input-group'>\n        <div className='app-input'>\n          <label>Роль</label>\n          <input value='Сделать тут дропдаун'/>\n        </div>\n        <div className='app-input wide-input'>\n          <label>Фамилия, имя, отчество</label>\n          <input value='Никаев Филимон Евлампиевич'/>\n        </div>\n        <div className='app-input wide-input'>\n          <label>Блокчейновый адрес</label>\n          <input value='Эту штуку с дропдауном и поиском я тоже еще не делал'/>\n          <button className='secondary-button small-button'>Посмотреть на Эзерскане</button>\n        </div>\n        <div className='app-input medium-input'>\n          <label>Электронная почта</label>\n          <input value='mfburgo@outlook.com'/>\n        </div>\n        <div className='app-input small-input'>\n          <label>Пароль</label>\n          <input type='password' value='12345678'/>\n        </div>\n        <div className='app-input'>\n          <label>Часовой пояс</label>\n          <input value='тут должен быть дропдаун'/>\n        </div>\n      </div>\n\n      <h2>Платёжные реквизиты</h2>\n      <div className='app-input-group'>\n        <div className='app-input wide-input'>\n          <label>Наименование плательщика</label>\n          <input value='ОАО «Сетевая компания»'/>\n        </div>\n        <div className='app-input medium-input'>\n          <label>Расчётный счёт</label>\n          <input value='40702810500000000072'/>\n        </div>\n        <div className='app-input wide-input'>\n          <label>Наименование банка</label>\n          <input value='ООО Банк «Аверс»'/>\n        </div>\n        <div className='app-input tiny-input'>\n          <label>БИК</label>\n          <input value='049205774'/>\n        </div>\n        <div className='app-input small-input'>\n          <label>Корреспондентский счет</label>\n          <input value='30101810500000000774'/>\n        </div>\n        <div className='app-input tiny-input'>\n          <label>ИНН</label>\n          <input value='1653003601'/>\n        </div>\n        <div className='app-input tiny-input'>\n          <label>КПП</label>\n          <input value='165501001'/>\n        </div>\n      </div>\n      <div className='app-button-group'>\n        <button className='primary-button'>Сохранить изменения</button>\n        <button className='secondary-button'>Отменить</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ProfilePage;\n","import ContractPage from \"./components/ContractPage/ContractPage\";\nimport UsersPage from \"./components/UsersPage/UsersPage\";\nimport AddressesPage from \"./components/AddressesPage/AddressesPage\";\nimport JournalPage from \"./components/JournalPage/JournalPage\";\nimport TransactionsPage from \"./components/TransactionsPage/TransactionsPage\";\nimport ProfilePage from \"./components/ProfilePage/ProfilePage\";\n\nconst routes = [\n  { path: '/contract', exact: true, component: ContractPage },\n  { path: '/users', exact: true, component: UsersPage },\n  { path: '/addresses', exact: true, component: AddressesPage },\n  { path: '/journal', exact: true, component: JournalPage },\n  { path: '/transactions', exact: true, component: TransactionsPage },\n  { path: '/profile', exact: true, component: ProfilePage },\n];\n\nexport default routes;","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { Switch, Route } from 'react-router'\nimport Header from './Header/header';\nimport './App.scss';\nimport routes from './../routes';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../styles/main.scss'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      {/*FIXME why tf we need container? it has left\\right paddings we actually dont need */}\n      {/*<Container>*/}\n        <Switch>\n          { routes.map((route, index) => {\n              return route.component ? (\n                <Route \n                  key={ index }\n                  path={ route.path }\n                  exact={ route.exact }\n                  name={ route.name }\n                  render={ props => (\n                    <route.component { ...props } />\n                  )} />\n              ) : null;\n          })}\n        </Switch>\n      {/*</Container>*/}\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nconst rootReducer = history => combineReducers({\n  router: connectRouter(history),\n});\n\nexport default rootReducer;\n","import { createBrowserHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport rootReducer from './reducers';\n\nexport const history = createBrowserHistory();\n\nexport default function configureStore() {\n  const store = createStore(\n    rootReducer(history), // root reducer with router state\n\n    compose(\n      applyMiddleware(\n        routerMiddleware(history), // for dispatching history actions\n        // ... other middlewares ...\n      ),\n    ),\n  );\n\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport configureStore, { history } from './store/configureStore';\n\nimport './index.scss';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={ store }>\n    <ConnectedRouter history={ history }>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\ndocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}