{"ast":null,"code":"import React from'react';import UsersTable from'./UsersTable/UsersTable';import RoleBasedRender from'../RoleBasedRender/RoleBasedRender';var mockUsers=[{name:'Никаев Фимилион Евлампиевич',address:'jdshgkjsdhg039g23u0g9u209gu23',mail:'example@mail.com',role:'Администратор',lastSeen:new Date().toISOString()},{name:'Никаев Фимилион Евлампиевич',address:'jdshgkjsdhg039g23u0g9u209gu23',mail:'example@mail.com',role:'Администратор',lastSeen:new Date().toISOString()},{name:'Никаев Фимилион Евлампиевич',address:'jdshgkjsdhg039g23u0g9u209gu23',mail:'example@mail.com',role:'Администратор',lastSeen:new Date().toISOString()},{name:'Никаев Фимилион Евлампиевич',address:'jdshgkjsdhg039g23u0g9u209gu23',mail:'example@mail.com',role:'Администратор',lastSeen:new Date().toISOString()},{name:'Никаев Фимилион Евлампиевич',address:'jdshgkjsdhg039g23u0g9u209gu23',mail:'example@mail.com',role:'Администратор',lastSeen:new Date().toISOString()},{name:'Никаев Фимилион Евлампиевич',address:'jdshgkjsdhg039g23u0g9u209gu23',mail:'example@mail.com',role:'Администратор',lastSeen:new Date().toISOString()}];function UsersPage(_ref){var history=_ref.history,match=_ref.match;// in future it is supposed to redirect to /users/:userId, where userId is the id of the user you clicked on\n// then you could get userId by props.match.params.userId in the component for route /users/:userId (check src/routes.js)\n// and make api call to fetch userData, or alternatively get it from redux store, if you stored all users there\nvar handleRowClick=function handleRowClick(event){return history.push(\"\".concat(match.path,\"/1\"));};var handleDelete=function handleDelete(event){return console.log('Clicked delete');};return React.createElement(\"div\",{className:\"page-content\"},React.createElement(\"h1\",null,\"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0438\"),React.createElement(RoleBasedRender,{requiredRoles:['Администратор','Менеджер']},React.createElement(\"button\",{className:\"primary-button\",type:\"button\"},\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\")),React.createElement(UsersTable,{users:mockUsers,onRowClick:handleRowClick,onDelete:handleDelete}));}export default UsersPage;","map":{"version":3,"sources":["/Users/macbook/Documents/Work/MrDrap1/src/components/UsersPage/UsersPage.jsx"],"names":["React","UsersTable","RoleBasedRender","mockUsers","name","address","mail","role","lastSeen","Date","toISOString","UsersPage","history","match","handleRowClick","event","push","path","handleDelete","console","log"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,yBAAvB,CACA,MAAOC,CAAAA,eAAP,KAA4B,oCAA5B,CAEA,GAAMC,CAAAA,SAAS,CAAG,CAChB,CAAEC,IAAI,CAAE,6BAAR,CAAuCC,OAAO,CAAE,+BAAhD,CAAiFC,IAAI,CAAE,kBAAvF,CAA2GC,IAAI,CAAE,eAAjH,CAAkIC,QAAQ,CAAE,GAAIC,CAAAA,IAAJ,GAAWC,WAAX,EAA5I,CADgB,CAEhB,CAAEN,IAAI,CAAE,6BAAR,CAAuCC,OAAO,CAAE,+BAAhD,CAAiFC,IAAI,CAAE,kBAAvF,CAA2GC,IAAI,CAAE,eAAjH,CAAkIC,QAAQ,CAAE,GAAIC,CAAAA,IAAJ,GAAWC,WAAX,EAA5I,CAFgB,CAGhB,CAAEN,IAAI,CAAE,6BAAR,CAAuCC,OAAO,CAAE,+BAAhD,CAAiFC,IAAI,CAAE,kBAAvF,CAA2GC,IAAI,CAAE,eAAjH,CAAkIC,QAAQ,CAAE,GAAIC,CAAAA,IAAJ,GAAWC,WAAX,EAA5I,CAHgB,CAIhB,CAAEN,IAAI,CAAE,6BAAR,CAAuCC,OAAO,CAAE,+BAAhD,CAAiFC,IAAI,CAAE,kBAAvF,CAA2GC,IAAI,CAAE,eAAjH,CAAkIC,QAAQ,CAAE,GAAIC,CAAAA,IAAJ,GAAWC,WAAX,EAA5I,CAJgB,CAKhB,CAAEN,IAAI,CAAE,6BAAR,CAAuCC,OAAO,CAAE,+BAAhD,CAAiFC,IAAI,CAAE,kBAAvF,CAA2GC,IAAI,CAAE,eAAjH,CAAkIC,QAAQ,CAAE,GAAIC,CAAAA,IAAJ,GAAWC,WAAX,EAA5I,CALgB,CAMhB,CAAEN,IAAI,CAAE,6BAAR,CAAuCC,OAAO,CAAE,+BAAhD,CAAiFC,IAAI,CAAE,kBAAvF,CAA2GC,IAAI,CAAE,eAAjH,CAAkIC,QAAQ,CAAE,GAAIC,CAAAA,IAAJ,GAAWC,WAAX,EAA5I,CANgB,CAAlB,CASA,QAASC,CAAAA,SAAT,MAAuC,IAAlBC,CAAAA,OAAkB,MAAlBA,OAAkB,CAATC,KAAS,MAATA,KAAS,CACrC;AACA;AACA;AACA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAC,KAAK,QAAIH,CAAAA,OAAO,CAACI,IAAR,WAAiBH,KAAK,CAACI,IAAvB,OAAJ,EAA5B,CACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAH,KAAK,QAAII,CAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAAJ,EAA1B,CAEA,MACE,4BAAK,SAAS,CAAC,cAAf,EACE,yGADF,CAEE,oBAAC,eAAD,EAAiB,aAAa,CAAG,CAAC,eAAD,CAAkB,UAAlB,CAAjC,EACE,8BAAQ,SAAS,CAAC,gBAAlB,CAAmC,IAAI,CAAC,QAAxC,8HADF,CAFF,CAKE,oBAAC,UAAD,EACE,KAAK,CAAGjB,SADV,CAEE,UAAU,CAAGW,cAFf,CAGE,QAAQ,CAAGI,YAHb,EALF,CADF,CAaD,CAED,cAAeP,CAAAA,SAAf","sourcesContent":["import React from 'react';\nimport UsersTable from './UsersTable/UsersTable';\nimport RoleBasedRender from '../RoleBasedRender/RoleBasedRender';\n\nconst mockUsers = [\n  { name: 'Никаев Фимилион Евлампиевич', address: 'jdshgkjsdhg039g23u0g9u209gu23', mail: 'example@mail.com', role: 'Администратор', lastSeen: new Date().toISOString() },\n  { name: 'Никаев Фимилион Евлампиевич', address: 'jdshgkjsdhg039g23u0g9u209gu23', mail: 'example@mail.com', role: 'Администратор', lastSeen: new Date().toISOString() },\n  { name: 'Никаев Фимилион Евлампиевич', address: 'jdshgkjsdhg039g23u0g9u209gu23', mail: 'example@mail.com', role: 'Администратор', lastSeen: new Date().toISOString() },\n  { name: 'Никаев Фимилион Евлампиевич', address: 'jdshgkjsdhg039g23u0g9u209gu23', mail: 'example@mail.com', role: 'Администратор', lastSeen: new Date().toISOString() },\n  { name: 'Никаев Фимилион Евлампиевич', address: 'jdshgkjsdhg039g23u0g9u209gu23', mail: 'example@mail.com', role: 'Администратор', lastSeen: new Date().toISOString() },\n  { name: 'Никаев Фимилион Евлампиевич', address: 'jdshgkjsdhg039g23u0g9u209gu23', mail: 'example@mail.com', role: 'Администратор', lastSeen: new Date().toISOString() },\n];\n\nfunction UsersPage({ history, match }) {\n  // in future it is supposed to redirect to /users/:userId, where userId is the id of the user you clicked on\n  // then you could get userId by props.match.params.userId in the component for route /users/:userId (check src/routes.js)\n  // and make api call to fetch userData, or alternatively get it from redux store, if you stored all users there\n  const handleRowClick = event => history.push(`${ match.path }/1`);\n  const handleDelete = event => console.log('Clicked delete');\n\n  return (\n    <div className=\"page-content\">\n      <h1>Пользователи</h1>\n      <RoleBasedRender requiredRoles={ ['Администратор', 'Менеджер'] } >\n        <button className=\"primary-button\" type=\"button\">Добавить пользователя</button>\n      </RoleBasedRender>\n      <UsersTable \n        users={ mockUsers } \n        onRowClick={ handleRowClick } \n        onDelete={ handleDelete }\n      />\n    </div>\n  );\n}\n\nexport default UsersPage;\n"]},"metadata":{},"sourceType":"module"}